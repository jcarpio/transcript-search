const { Client } = require('@elastic/elasticsearch');

// Verificar que las variables de entorno necesarias est√©n configuradas
if (!process.env.CLOUD_ID || !process.env.ELASTIC_USERNAME || !process.env.ELASTIC_PASSWORD) {
  console.error("‚ùå ERROR: Faltan variables de entorno de Elasticsearch.");
  process.exit(1); // Detiene la ejecuci√≥n si faltan credenciales
}

// Configuraci√≥n del cliente de Elasticsearch en Elastic Cloud
const client = new Client({
  cloud: {
    id: process.env.CLOUD_ID
  },
  auth: {
    username: process.env.ELASTIC_USERNAME,
    password: process.env.ELASTIC_PASSWORD
  }
});

// Nombre del √≠ndice y tipo de documento
const index = 'library';
const type = '_doc';

/** Verifica el estado de la conexi√≥n con Elasticsearch */
async function checkConnection() {
  try {
    console.log("üîç Verificando conexi√≥n con Elasticsearch...");
    const health = await client.cluster.health({});
    console.log("‚úÖ Elasticsearch Health:", health);
    return true;
  } catch (err) {
    console.error("‚ùå Error de conexi√≥n con Elasticsearch:", err);
    throw err; // Lanza el error para que sea registrado en logs
  }
}

/** Reinicia el √≠ndice en Elasticsearch */
async function resetIndex() {
  try {
    console.log("üîÑ Reiniciando √≠ndice...");
    const exists = await client.indices.exists({ index });
    if (exists) {
      await client.indices.delete({ index });
      console.log(`üóëÔ∏è √çndice '${index}' eliminado.`);
    }

    await client.indices.create({ index });
    console.log(`‚úÖ √çndice '${index}' creado.`);
    await putBookMapping();
  } catch (err) {
    console.error("‚ùå Error al reiniciar el √≠ndice:", err);
    throw err;
  }
}

/** Agrega el mapeo de los documentos en Elasticsearch */
async function putBookMapping() {
  try {
    console.log("üìå Configurando mapeo de documentos...");
    const schema = {
      properties: {
        title: { type: 'keyword' },
        author: { type: 'keyword' },
        url_original: { type: 'keyword' },
        url_youtube: { type: 'keyword' },
        url_ivoox: { type: 'keyword' },
        location: { type: 'integer' },
        text: { type: 'text' }
      }
    };

    await client.indices.putMapping({ index, body: schema });
    console.log("‚úÖ Mapeo de documentos configurado.");
  } catch (err) {
    console.error("‚ùå Error al configurar el mapeo:", err);
    throw err;
  }
}

module.exports = {
  client, index, type, checkConnection, resetIndex
};
